name: Casual Chat Server CI

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      deploy_to_qa:
        description: "Deploy to QA? (yes/no)"
        required: true
        default: "no"

env:
  CC_BUILD_PREFIX: 'Casual Chat '
  COMPOSE_PROJECT_NAME: "ghactions"
  STAGING_VM: "cchat-int-0.csse.rose-hulman.edu"
  STAGING_USER: "csse"
  QA_VM: "cchat-ext-1.csse.rose-hulman.edu"
  QA_USER: "csse"

jobs:
  check-env:
    name: Check Environment
    runs-on: self-hosted
    steps:
      - name: Add Go Path # Do this before all go commands
        run: | 
          echo "GO_PATH=$HOME/go" >> $GITHUB_ENV
          echo "$HOME/go/bin" >> $GITHUB_PATH
          echo "/usr/local/go/bin" >> $GITHUB_PATH
      - name: Verify go Installment
        run: go version
      - name: Verify make Installment
        run: make -version
      - name: Verify golangci-lint Installment
        run: golangci-lint version
      - name: Verify node Installment
        run: node -v
      - name: Verify npm Installment
        run: npm -v
      - name: Verify xunit-viewer Installment
        run: xunit-viewer --version
      - name: Verify docker Installment
        run: docker version
      - name: Verify docker-compose Installment
        run: docker-compose version
      - name: Verify zip Installment
        run: zip
      - name: Clean Environment # Ensure docker generated files are properly cleaned
        run: rm -rf *

  check-app-layers:
    name: Check App Layers
    runs-on: self-hosted
    needs: [ check-env ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          path: ./mattermost-server

      - name: Add Go Path # Do this before all go commands
        run: | 
          echo "GO_PATH=$HOME/go" >> $GITHUB_ENV
          echo "$HOME/go/bin" >> $GITHUB_PATH
          echo "/usr/local/go/bin" >> $GITHUB_PATH

      - name: Check App Layers
        run: |
          make app-layers
          if [[ -n $(git status --porcelain) ]]; then echo "Please update the app layers using make app-layers"; exit 1; fi
        working-directory: ./mattermost-server

  check-store-layers:
    name: Check Store Layers
    runs-on: self-hosted
    needs: [ check-env ]
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          path: ./mattermost-server

      - name: Add Go Path # Do this before all go commands
        run: | 
          echo "GO_PATH=$HOME/go" >> $GITHUB_ENV
          echo "$HOME/go/bin" >> $GITHUB_PATH
          echo "/usr/local/go/bin" >> $GITHUB_PATH

      - name: Check Store Layers
        run: |
          make store-layers
          if [[ -n $(git status --porcelain) ]]; then echo "Please update the store layers using make store-layers"; exit 1; fi
        working-directory: ./mattermost-server
  
  check-server-style:
    name: Check Server Style
    runs-on: self-hosted
    needs: [ check-env ]
    steps:
      - name: Export Build Number
        run: echo "BUILD_NUMBER=$CC_BUILD_PREFIX$GITHUB_RUN_NUMBER" >> $GITHUB_ENV

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          path: ./mattermost-server

      - name: Add Go Path # Do this before all go commands
        run: | 
          echo "GO_PATH=$HOME/go" >> $GITHUB_ENV
          echo "$HOME/go/bin" >> $GITHUB_PATH
          echo "/usr/local/go/bin" >> $GITHUB_PATH

      - name: Install mattermost-govet
        run: GO111MODULE=off GOBIN=$(pwd)/bin go get -u github.com/mattermost/mattermost-govet
        working-directory: ./mattermost-server

      - name: Check Style
        run: |
          make config-reset
          make check-style BUILD_NUMBER="$BUILD_NUMBER" MM_NO_ENTERPRISE_LINT=true
        working-directory: ./mattermost-server

  test-server: # Run go tests 
    name: Test Server
    runs-on: self-hosted
    needs: [ test-schema ] 
    strategy: # Server tests need to run in 2 environments
      fail-fast: false # Always run both tests even when 1 fails
      matrix:
        dbparams:
          - {
            DRIVER_NAME: mysql,
            DATA_SOURCE: "mmuser:mostest@tcp(mysql:3306)/mattermost_test?charset=utf8mb4,utf8"
          }
          - {
            DRIVER_NAME: postgres,
            DATA_SOURCE: "postgres://mmuser:mostest@postgres:5432/mattermost_test?sslmode=disable&connect_timeout=10"
          }
    steps:
      - name: Export Environment Variables
        run: |
          echo "BUILD_NUMBER=$CC_BUILD_PREFIX$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
          echo "WORK_ROOT_PATH=$(pwd)"  >> $GITHUB_ENV

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          path: ./mattermost-server

      - name: Setup Enterprise Environment
        run: |
          rm -rf enterprise
          mkdir -p enterprise/imports
          cp -T mattermost-server/imports/placeholder.go enterprise/imports/imports.go
      
      - name: Add Go Path # Do this before all go commands
        run: | 
          echo "GO_PATH=$HOME/go" >> $GITHUB_ENV
          echo "$HOME/go/bin" >> $GITHUB_PATH
          echo "/usr/local/go/bin" >> $GITHUB_PATH

      - name: Run docker-compose
        run: |
          cd mattermost-server/build
          docker-compose --no-ansi run --rm start_dependencies
          cat ../tests/test-data.ldif | docker-compose --no-ansi exec -T openldap bash -c 'ldapadd -x -D "cn=admin,dc=mm,dc=test,dc=com" -w mostest';
          docker-compose --no-ansi exec -T minio sh -c 'mkdir -p /data/mattermost-test';
          docker-compose --no-ansi ps

      - name: Wait for docker-compose
        run: |
          sleep 5
          docker run --net ${{ env.COMPOSE_PROJECT_NAME }}_mm-test appropriate/curl:latest sh -c "until curl --max-time 5 --output - http://mysql:3306; do echo waiting for mysql; sleep 5; done;"
          docker run --net ${{ env.COMPOSE_PROJECT_NAME }}_mm-test appropriate/curl:latest sh -c "until curl --max-time 5 --output - http://elasticsearch:9200; do echo waiting for elasticsearch; sleep 5; done;"

      - name: Test Server - (${{ matrix.dbparams.DRIVER_NAME }})
        run: |
          ulimit -n 8096
          mkdir -p client/plugins
          docker run -i --net ${{ env.COMPOSE_PROJECT_NAME }}_mm-test \
            --env TEST_DATABASE_MYSQL_DSN="mmuser:mostest@tcp(mysql:3306)/mattermost_test?charset=utf8mb4,utf8\u0026readTimeout=30s\u0026writeTimeout=30s" \
            --env TEST_DATABASE_POSTGRESQL_DSN="postgres://mmuser:mostest@postgres:5432/mattermost_test?sslmode=disable&connect_timeout=10" \
            --env TEST_DATABASE_MYSQL_ROOT_PASSWD=mostest \
            --env CI_INBUCKET_HOST=inbucket \
            --env CI_MINIO_HOST=minio \
            --env CI_INBUCKET_PORT=10080 \
            --env CI_MINIO_PORT=9000 \
            --env CI_INBUCKET_SMTP_PORT=10025 \
            --env CI_LDAP_HOST=openldap \
            --env IS_CI="true" \
            --env MM_EMAILSETTINGS_SMTPSERVER=inbucket \
            --env MM_EMAILSETTINGS_SMTPPORT=10025 \
            --env MM_ELASTICSEARCHSETTINGS_CONNECTIONURL=http://elasticsearch:9200 \
            --env MM_SQLSETTINGS_DATASOURCE="${{ matrix.dbparams.DATA_SOURCE }}" \
            --env MM_SQLSETTINGS_DRIVERNAME=${{ matrix.dbparams.DRIVER_NAME }} \
            --env GOBIN=/mattermost/mattermost-server/bin \
            -v ${{ env.WORK_ROOT_PATH }}:/mattermost \
            -w /mattermost/mattermost-server \
            mattermost/mattermost-build-server:20200731_golang-1.14.6 \
            bash -c 'ulimit -n 8096; make test-server BUILD_NUMBER="$BUILD_NUMBER" TESTFLAGS= TESTFLAGSEE='
        working-directory: ./mattermost-server
        timeout-minutes: 60

      - name: Capture docker logs
        if: always()
        run: |
            mkdir -p logs
            docker-compose logs --tail="all" -t --no-color > logs/docker-compose_logs
            docker ps -a --no-trunc > logs/docker_ps
            docker stats -a --no-stream > logs/docker_stats
            tar -czvf logs/docker_logs.tar.gz logs/docker-compose_logs logs/docker_ps logs/docker_stats
        working-directory: ./mattermost-server/build  

      - name: Check Xml Test Report
        id: find_test_report
        run: test -f report.xml
        if: always()
        working-directory: ./mattermost-server

      - name: Generate Html Report
        run: |
          xunit-viewer -r report.xml -o report.html
        if: always() && steps.find_test_report.outcome == 'success'
        working-directory: ./mattermost-server

      - name: Upload Logs and Test Reports - (${{ matrix.dbparams.DRIVER_NAME }})
        if: always() && steps.find_test_report.outcome == 'success'
        uses: actions/upload-artifact@v2
        with:
          name: server-test-artifacts-${{ matrix.dbparams.DRIVER_NAME }}-${{ github.run_id }}
          path: |
            mattermost-server/build/logs/docker-compose_logs
            mattermost-server/build/logs/docker_ps
            mattermost-server/build/logs/docker_stats
            mattermost-server/report.xml
            mattermost-server/report.html

      - name: Upload Logs Only - (${{ matrix.dbparams.DRIVER_NAME }})
        if: always() && steps.find_test_report.outcome != 'success'
        uses: actions/upload-artifact@v2
        with:
          name: server-test-artifacts-${{ matrix.dbparams.DRIVER_NAME }}-${{ github.run_id }}
          path: |
            mattermost-server/build/logs/docker-compose_logs
            mattermost-server/build/logs/docker_ps
            mattermost-server/build/logs/docker_stats

      - name: Clean up Docker generated files # Docker generated files are owned by root
        run: |
          docker run -i --net ${{ env.COMPOSE_PROJECT_NAME }}_mm-test \
            -v ${{ env.WORK_ROOT_PATH }}:/mattermost \
            -w /mattermost/mattermost-server \
            mattermost/mattermost-build-server:20200731_golang-1.14.6 \
            bash -c 'rm -rf services/mailservice/data'
        if: always()
        working-directory: ./mattermost-server

      - name: Stop Docker
        run: |
          docker-compose down -v
          docker-compose rm -v
        if: always()
        working-directory: ./mattermost-server

  test-schema:
    name: Test Schema Migration
    runs-on: self-hosted
    needs: [ check-server-style , check-app-layers , check-store-layers ]
    strategy: # Server tests need to run in 2 environments
      fail-fast: false # Always run both tests even when 1 fails
      matrix:
        dbparams:
          - {
            DRIVER_NAME: mysql,
            MIGRATED_DATA_SOURCE: "mmuser:mostest@tcp(mysql:3306)/migrated?charset=utf8mb4,utf8&readTimeout=30s&writeTimeout=30s",
            LATEST_DATA_SOURCE: "mmuser:mostest@tcp(mysql:3306)/latest?charset=utf8mb4,utf8&readTimeout=30s&writeTimeout=30s",
            CREATE_CMD: mysql mysql -uroot -pmostest -e "CREATE DATABASE migrated; CREATE DATABASE latest; GRANT ALL PRIVILEGES ON migrated.* TO mmuser; GRANT ALL PRIVILEGES ON latest.* TO mmuser",
            DB_IMPORT_CMD: mysql mysql -D migrated -uroot -pmostest < ../scripts/mattermost-mysql-5.0.sql,
            POST_RUN: echo "Ignoring known MySQL mismatch ChannelMembers.SchemeGuest" && docker-compose --no-ansi exec -T mysql mysql -D migrated -uroot -pmostest -e "ALTER TABLE ChannelMembers DROP COLUMN SchemeGuest;" && docker-compose --no-ansi exec -T mysql mysql -D latest -uroot -pmostest -e "ALTER TABLE ChannelMembers DROP COLUMN SchemeGuest;",
            MIGRATED_DUMP_CMD: mysql mysqldump --skip-opt --no-data --compact -u root -pmostest migrated > migrated.sql,
            LATEST_DUMP_CMD: mysql mysqldump --skip-opt --no-data --compact -u root -pmostest latest > latest.sql,
            REMOVE_CMD: mysql mysql -uroot -pmostest -e 'DROP DATABASE migrated; DROP DATABASE latest',
          }
          - {
            DRIVER_NAME: postgres,
            MIGRATED_DATA_SOURCE: "postgres://mmuser:mostest@postgres:5432/migrated?sslmode=disable&connect_timeout=10",
            LATEST_DATA_SOURCE: "postgres://mmuser:mostest@postgres:5432/latest?sslmode=disable&connect_timeout=10",
            CREATE_CMD: postgres sh -c 'exec echo "CREATE DATABASE migrated; CREATE DATABASE latest;" | exec psql -U mmuser mattermost_test',
            DB_IMPORT_CMD: postgres psql -U mmuser -d migrated < ../scripts/mattermost-postgresql-5.0.sql,
            POST_RUN: echo "There is no known Postgres mismatch",
            MIGRATED_DUMP_CMD: postgres pg_dump --schema-only -d migrated -U mmuser > migrated.sql,
            LATEST_DUMP_CMD: postgres pg_dump --schema-only -d latest -U mmuser > latest.sql,
            REMOVE_CMD: postgres sh -c 'exec echo "DROP DATABASE migrated; DROP DATABASE latest;" | exec psql -U mmuser mattermost_test'
          }
    steps:
      - name: Export Environment Variables
        run: |
          echo "BUILD_NUMBER=$CC_BUILD_PREFIX$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
          echo "WORK_ROOT_PATH=$(pwd)"  >> $GITHUB_ENV

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          path: ./mattermost-server

      - name: Setup Enterprise Environment
        run: |
          rm -rf enterprise
          mkdir -p enterprise/imports
          cp -T mattermost-server/imports/placeholder.go enterprise/imports/imports.go
      
      - name: Add Go Path # Do this before all go commands
        run: | 
          echo "GO_PATH=$HOME/go" >> $GITHUB_ENV
          echo "$HOME/go/bin" >> $GITHUB_PATH
          echo "/usr/local/go/bin" >> $GITHUB_PATH

      - name: Run docker-compose
        run: |
          cd mattermost-server/build
          docker-compose --no-ansi run --rm start_dependencies
          cat ../tests/test-data.ldif | docker-compose --no-ansi exec -T openldap bash -c 'ldapadd -x -D "cn=admin,dc=mm,dc=test,dc=com" -w mostest';
          docker-compose --no-ansi exec -T minio sh -c 'mkdir -p /data/mattermost-test';
          docker-compose --no-ansi ps

      - name: Wait for docker-compose
        run: |
          sleep 5
          docker run --net ${{ env.COMPOSE_PROJECT_NAME }}_mm-test appropriate/curl:latest sh -c "until curl --max-time 5 --output - http://mysql:3306; do echo waiting for mysql; sleep 5; done;"
          docker run --net ${{ env.COMPOSE_PROJECT_NAME }}_mm-test appropriate/curl:latest sh -c "until curl --max-time 5 --output - http://elasticsearch:9200; do echo waiting for elasticsearch; sleep 5; done;"

      - name: Test Schema - (${{ matrix.dbparams.DRIVER_NAME }})
        run: |
          ulimit -n 8096
          mkdir -p client/plugins
          cd build
          echo "Creating databases"
          docker-compose --no-ansi exec -T ${{ matrix.dbparams.CREATE_CMD }}
          echo "Importing ${{ matrix.dbparams.DRIVER_NAME }} dump from version 5.0"
          docker-compose --no-ansi exec -T ${{ matrix.dbparams.DB_IMPORT_CMD }}
          docker run -i --net ${{ env.COMPOSE_PROJECT_NAME }}_mm-test \
            --env CI_INBUCKET_HOST=inbucket \
            --env CI_MINIO_HOST=minio \
            --env CI_INBUCKET_PORT=10080 \
            --env CI_MINIO_PORT=9000 \
            --env CI_INBUCKET_SMTP_PORT=10025 \
            --env CI_LDAP_HOST=openldap \
            --env IS_CI="true" \
            --env MM_EMAILSETTINGS_SMTPSERVER=inbucket \
            --env MM_EMAILSETTINGS_SMTPPORT=10025 \
            --env MM_ELASTICSEARCHSETTINGS_CONNECTIONURL=http://elasticsearch:9200 \
            --env MM_SQLSETTINGS_DATASOURCE="${{ matrix.dbparams.MIGRATED_DATA_SOURCE }}" \
            --env MM_SQLSETTINGS_DRIVERNAME=${{ matrix.dbparams.DRIVER_NAME }} \
            --env GOBIN=/mattermost/mattermost-server/bin \
            -v ${{ env.WORK_ROOT_PATH }}:/mattermost \
            -w /mattermost/mattermost-server \
            mattermost/mattermost-build-server:20200731_golang-1.14.6 \
            bash -c 'ulimit -n 8096; make ARGS="version" run-cli && make MM_SQLSETTINGS_DATASOURCE="${{ matrix.dbparams.LATEST_DATA_SOURCE }}" ARGS="version" run-cli'
          ${{ matrix.dbparams.POST_RUN }}
          echo "Generating dump"
          docker-compose --no-ansi exec -T ${{ matrix.dbparams.MIGRATED_DUMP_CMD }}
          docker-compose --no-ansi exec -T ${{ matrix.dbparams.LATEST_DUMP_CMD }}
          echo "Removing databases created for db comparison"
          docker-compose --no-ansi exec -T ${{ matrix.dbparams.REMOVE_CMD }}
          echo "Generating diff"
          diff migrated.sql latest.sql > diff.txt && echo "Both schemas are same" || (echo "Schema mismatch" && cat diff.txt && exit 1)
        working-directory: ./mattermost-server
        timeout-minutes: 60
      
      - name: Stop Docker
        run: |
          docker-compose down -v
          docker-compose rm -v
        if: always()
        working-directory: ./mattermost-server

  check-webapp-style:
    name: Check Webapp Style
    runs-on: self-hosted
    needs: [ test-server ]
    steps:
      - name: Export Webapp Repository Name
        run: | 
          echo "Server Repository: $GITHUB_REPOSITORY"
          echo "CC_WEBAPP_REPOSITORY=${GITHUB_REPOSITORY%%/mattermost-server}/mattermost-webapp" >> $GITHUB_ENV

      - name: Checkout Webapp Repository
        uses: actions/checkout@v2
        with:
          repository: ${{ env.CC_WEBAPP_REPOSITORY }}
          path: ./mattermost-webapp

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependency
        run: npm ci
        working-directory: ./mattermost-webapp
        
      - name: Check Style
        run: npm run check
        working-directory: ./mattermost-webapp
  
  check-i18n:
    name: Check Webapp I18n
    runs-on: self-hosted
    needs: [ test-server ]
    steps:
      - name: Export Webapp Repository Name
        run: | 
          echo "Server Repository: $GITHUB_REPOSITORY"
          echo "CC_WEBAPP_REPOSITORY=${GITHUB_REPOSITORY%%/mattermost-server}/mattermost-webapp" >> $GITHUB_ENV

      - name: Checkout Webapp Repository
        uses: actions/checkout@v2
        with:
          repository: ${{ env.CC_WEBAPP_REPOSITORY }}
          path: ./mattermost-webapp

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependency
        run: npm ci
        working-directory: ./mattermost-webapp

      - name: Check I18n
        run: |
          cp i18n/en.json /tmp/en.json
          mkdir -p /tmp/fake-mobile-dir/assets/base/i18n/
          echo '{}' > /tmp/fake-mobile-dir/assets/base/i18n/en.json
          npm run mmjstool -- i18n extract-webapp --webapp-dir . --mobile-dir /tmp/fake-mobile-dir
          diff /tmp/en.json i18n/en.json 
          npm run mmjstool -- i18n clean-empty --webapp-dir . --mobile-dir /tmp/fake-mobile-dir --check
          rm -rf tmp
        working-directory: ./mattermost-webapp

  check-webapp-type:
    name: Check Webapp Type
    runs-on: self-hosted
    needs: [ test-server ]
    steps:
      - name: Export Webapp Repository Name
        run: | 
          echo "Server Repository: $GITHUB_REPOSITORY"
          echo "CC_WEBAPP_REPOSITORY=${GITHUB_REPOSITORY%%/mattermost-server}/mattermost-webapp" >> $GITHUB_ENV

      - name: Checkout Webapp Repository
        uses: actions/checkout@v2
        with:
          repository: ${{ env.CC_WEBAPP_REPOSITORY }}
          path: ./mattermost-webapp

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependency
        run: npm ci
        working-directory: ./mattermost-webapp

      - name: Check Type
        run: | 
          npm run check-types
        working-directory: ./mattermost-webapp

  test-webapp:
    name: Test Webapp
    runs-on: self-hosted
    needs: [ check-webapp-style , check-i18n , check-webapp-type ]
    steps:
      - name: Export Webapp Repository Name
        run: | 
          echo "Server Repository: $GITHUB_REPOSITORY"
          echo "CC_WEBAPP_REPOSITORY=${GITHUB_REPOSITORY%%/mattermost-server}/mattermost-webapp" >> $GITHUB_ENV

      - name: Checkout Webapp Repository
        uses: actions/checkout@v2
        with:
          repository: ${{ env.CC_WEBAPP_REPOSITORY }}
          path: ./mattermost-webapp

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependency
        run: npm ci
        working-directory: ./mattermost-webapp

      - name: Test
        run: npm run test-ci 
        working-directory: ./mattermost-webapp

      - name: Check Xml Test Report
        id: find_test_report
        run: test -f build/test-results.xml
        if: always()
        working-directory: ./mattermost-webapp

      - name: Generate HTML Report
        run: xunit-viewer -r build/test-results.xml -o build/test-results.html
        if: steps.find_test_report.outcome == 'success'
        working-directory: ./mattermost-webapp

      - name: Upload Test Report
        uses: actions/upload-artifact@v2
        if: steps.find_test_report.outcome == 'success'
        with:
          name: webapp-test-results-${{ github.run_id }}
          path: |
            mattermost-webapp/build/test-results.xml
            mattermost-webapp/build/test-results.html

  build:
    name: Build and Package
    runs-on: self-hosted
    needs: [ test-server , test-webapp ]
    steps:
      - name: Export Webapp Repository Name
        run: | 
          echo "Server Repository: $GITHUB_REPOSITORY"
          echo "CC_WEBAPP_REPOSITORY=${GITHUB_REPOSITORY%%/mattermost-server}/mattermost-webapp" >> $GITHUB_ENV

      - name: Export Build Number
        run: echo "BUILD_NUMBER=$CC_BUILD_PREFIX$GITHUB_RUN_NUMBER" >> $GITHUB_ENV

      - name: Checkout Webapp Repository
        uses: actions/checkout@v2
        with:
          repository: ${{ env.CC_WEBAPP_REPOSITORY }}
          path: ./mattermost-webapp

      - name: Checkout Server Repository
        uses: actions/checkout@v2
        with:
          path: ./mattermost-server

      - name: Add Go Path # Do this before all go commands
        run: | 
          echo "GO_PATH=$HOME/go" >> $GITHUB_ENV
          echo "$HOME/go/bin" >> $GITHUB_PATH
          echo "/usr/local/go/bin" >> $GITHUB_PATH

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependency
        run: |
          npm ci
          cd node_modules/mattermost-redux && npm i && npm run build
        working-directory: ./mattermost-webapp

      - name: Build Webapp
        run: npm run build 
        working-directory: ./mattermost-webapp

      - name: Setup Enterprise Environment
        run: |
          rm -rf enterprise
          mkdir -p enterprise/imports
          cp -T mattermost-server/imports/placeholder.go enterprise/imports/imports.go

      - name: Build Server
        run: make build-cmd
        working-directory: ./mattermost-server

      - name: Package
        run: make package
        working-directory: ./mattermost-server

      - name: Upload Windows Package
        uses: actions/upload-artifact@v2
        with:
          name: casualchat-mattermost-windows-${{ github.run_number }}
          path: |
            mattermost-server/dist/mattermost-enterprise-windows-amd64.zip

      - name: Upload Linux Package
        uses: actions/upload-artifact@v2
        with:
          name: casualchat-mattermost-linux-${{ github.run_number }}
          path: |
            mattermost-server/dist/mattermost-enterprise-linux-amd64.tar.gz
            
      - name: Upload OSX Package
        uses: actions/upload-artifact@v2
        with:
          name: casualchat-mattermost-osx-${{ github.run_number }}
          path: |
            mattermost-server/dist/mattermost-enterprise-osx-amd64.tar.gz

  deploy-staging:
    name: Deploy to Staging
    runs-on: self-hosted
    needs: [ build ]
    steps:
      - name: Download Package
        uses: actions/download-artifact@v2
        with:
          name: casualchat-mattermost-linux-${{ github.run_number }}

      - name: Upload to Staging
        run: scp mattermost-enterprise-linux-amd64.tar.gz $STAGING_USER@$STAGING_VM:/home/$STAGING_USER

      - name: Deploy
        run: ssh $STAGING_USER@$STAGING_VM $STAGING_DEPLOY_SCRIPT
        env:
          STAGING_DEPLOY_SCRIPT: ${{ secrets.STAGING_DEPLOY_SCRIPT }}

  deploy-qa:
    name: Deploy to QA
    if: github.event.inputs.deploy_to_qa == 'yes'
    runs-on: self-hosted
    needs: [ build ]
    steps:
      - name: Download Package
        uses: actions/download-artifact@v2
        with:
          name: casualchat-mattermost-linux-${{ github.run_number }}

      - name: Upload to QA
        run: scp mattermost-enterprise-linux-amd64.tar.gz $QA_USER@$QA_VM:/home/$QA_USER

      - name: Deploy
        run: ssh $QA_USER@$QA_VM $QA_DEPLOY_SCRIPT
        env:
          QA_DEPLOY_SCRIPT: ${{ secrets.QA_DEPLOY_SCRIPT }}

  clean-docker:
    name: Clean Docker
    needs: [ test-server ]
    if: always()
    runs-on: self-hosted
    steps:
      - name: "Remove Stopped Containers"
        run: docker rm -v $(docker container ls -a -q)